#Tic-tac-toe (or noughts and crosses) is a simple strategy game in which two players take turns placing a mark on a 3x3 board,
#attempting to make a row, column, or diagonal of three with their mark. In this homework, we will use the tools we've covered 
#in the past two weeks to create a tic-tac-toe simulator, and evaluate basic winning strategies.

#----------------------------------------------------------------------------------------------------------------


# Exercise 1
#-----------

#For our tic-tac-toe board, we will use a numpy array with dimension 3 by 3. Make a function create_board() that creates such 
#a board, with values of integers 0. 

import numpy as np

def create_board():
    return np.zeros ((3,3))

#Call create_board(), and store this as board.

board = create_board()              

#------------------------------------------------------------------------------

# Exercise 2
#-----------

#Players 1 and 2 will take turns changing values of this array from a 0 to a 1 or 2, indicating the number of the player who places there. 
#Create a function place(board, player, position) with player being the current player (an integer 1 or 2), and position a tuple of length 
#2 specifying a desired location to place their marker. Only allow the current player to place a piece on the board (change the board position 
#to their number) if that position is empty (zero).

def place(board, player, position):
    if board[position] == 0:
        board[position] = player
    

#Use create_board() to store a board as board, and use place to have Player 1 place a piece on spot (0, 0).                                

board = create_board() 
place(board , 1 , (0,0))

#print (board)               
                 
#------------------------------------------------------------------------------

# Exercise 3
#-----------

#Create a function possibilities(board) that returns a list of all positions (tuples) on the board that are not 
#occupied (0). (Hint: numpy.where is a handy function that returns a list of indexes that meet a condition.)

def possibilities(board):
    not_occupied = np.where(board == 0)
    return list(zip(not_occupied[0], not_occupied[1]))



#board is already defined from previous exercises. Call possibilities(board) to see what it returns!

print(possibilities(board))

#------------------------------------------------------------------------------

# Exercise 4
#-----------

#Create a function random_place(board, player) that places a marker for the current player at random 
#among all the available positions (those currently set to 0).

import random 

def random_place(board, player):
    selections = possibilities(board)
    if len(selections) > 0:
        selection = random.choice(selections)
        place(board, player, selection)
    return board
  
                         
                               
#board is already defined from previous exercises. Call random_place(board, player) to place a random 
#marker for Player 2, and store this as board to update its value.

random_place(board, 2)

#------------------------------------------------------------------------------

# Exercise 5
#-----------

#board is already defined from previous exercises. Use random_place(board, player) to place three pieces 
#on board each for players 1 and 2.

board = create_board()
for i in range(3):
    for player in [1, 2]:
        random_place(board, player)                                                                   
                                                                   
#Print board to see your result

print(board)

#------------------------------------------------------------------------------

#Exercise 6
#-----------

#Now that players may place their pieces, how will they know they've won? Make a function row_win(board, player) 
#that takes the player (integer), and determines if any row consists of only their marker. 
#Have it return True of this condition is met, and False otherwise.

def row_win(board, player):
    if np.any(np.all(board==player, axis=1)): # this checks if any row contains all positions equal to player.
        return True
    else:
        return False
                                                                                    
                                                                                                 
#board is already defined from previous exercises. Call row_win to check if Player 1 has a complete row.

row_win(board, 1)
#------------------------------------------------------------------------------

#Exercise 7
#-----------

#Create a similar function col_win(board, player) that takes the player (integer), 
#and determines if any column consists of only their marker. Have it return True if this condition is met, 
#and False otherwise.
        

def col_win(board, player):
    if np.any(np.all(board == player, axis = 0)):
        return True
    else:
        return False                               
                                  
#board is already defined from previous exercises. Call col_win to check if Player 1 has a complete column.

col_win(board, 1)
#------------------------------------------------------------------------------

#Exercise 8
#-----------

#Finally, create a function diag_win(board, player) that tests if either diagonal of the board 
#consists of only their marker. Have it return True if this condition is met, and False otherwise.

board[1,1] = 2   
def diag_win(board, player):
    if np.all(np.diag(board) == player) or np.all(np.diag(np.fliplr(board)) == player):
        #np.daig gives the diagonal and np.fliplr flips the values in board
        return True
    else:
        return False                                 


#board is already defined from previous exercises. Call diag_win to check if Player 1 has a complete diagonal.

diag_win(board, 1)

#------------------------------------------------------------------------------

#Exercise 9
#-----------

#Create a function evaluate(board) that uses row_win, col_win, and diag_win functions for both players. 
#If one of them has won, return that player's number. If the board is full but no one has won, return -1.
#Otherwise, return 0.

def evaluate(board):
    winner = 0
    for player in [1, 2]:
        # add your code here!
        if row_win(board,player) == True:
            winner = player
        elif col_win(board, player) == True:
            winner = player
        elif diag_win(board, player) == True:
            winner = player
        pass
    if np.all(board != 0) and winner == 0:
        winner = -1
    return winner
                           
#board is already defined from previous exercises. Call evaluate to see if either player has won the game yet.

evaluate(board)
#------------------------------------------------------------------------------

#Exercise 10

#In this exercise, we will use all the functions we have written to simulate an entire game.

#The functions create_board(), random_place(board, player), and evaluate(board) are all defined as in previous exercises.

#Create a function play_game() that:

#- Creates a board.

#- Alternates taking turns between two players (beginning with Player 1), placing a marker during each turn.

#- Evaluates the board for a winner after each placement.

#- Continues the game until one player wins (returning 1 or 2 to reflect the winning player), or the game is a draw (returning -1).

#Call play_game 1000 times, and store the results of the game in a list called results. Use random.seed(1) so we can check your answer!

#How many times does Player 1 win out of 1000 games?
#ans - 591
def play_game():
    board = create_board()
    winner = 0
    while winner == 0:
        for player in [1,2]:
            random_place(board, player)
            winner = evaluate(board)
            if winner != 0:
                break
    return winner

results = [play_game() for i in range(1000)]
results.count(1)

#------------------------------------------------------------------------------

#Exercise 11
#-----------

#In the previous exercise, we saw that when guessing at random, it's better to go first, as one would expect. Let's see if Player 1 can improve their strategy.

#Create a function play_strategic_game(), where Player 1 always starts with the middle square, and otherwise both players place their markers randomly.

#Call play_strategic_game 1000 times.

#Set the seed to 1 using random.seed(1) again.

#How many times does Player 1 win out of 1000 games with this new strategy?

def play_strategic_game():
    board, winner = create_board(), 0
    board[1,1] = 1
    while winner == 0:
        for player in [2,1]:
            random_place(board, player)
            winner = evaluate(board)
            if winner != 0:
                break
    return winner

results = [play_strategic_game() for i in range(1000)]
results.count(1)
