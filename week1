#Exercise 1a
#Import the string library.

#Create a variable alphabet that consists of the lowercase and uppercase letters in the English alphabet using the ascii_letters data attribute of the string library.

#What line of code did you use to create the alphabet variable?

alphabet = string.ascii_letters
#------------------------------------------------------------------------#

#Exercise 1b
#The lower and upper case letters of the English alphabet should stored as the string variable alphabet.
#Consider the sentence 'Jim quickly realized that the beautiful gowns are expensive'. Create a dictionary count_letters with keys consisting of each unique letter in the sentence and values consisting of the number of times each letter is used in this sentence. Count upper case and lower case letters separately in the dictionary.
#What is the 3rd value of the dictionary?
#Hint: remeber that Python is zero indexed!

count_letters = {}         
for letter in sentence:
    if letter in alphabet:
        if letter in count_letters:
            count_letters[letter] += 1
        else:
            count_letters[letter] = 1

#print(count_letters.keys())
#print(count_letters.values())
#3rd vallue is 1, 8th value is 3

#--------------------------------------------------------------#

#1c 
#Rewrite your code from 1b to make a function called counter that takes a string input_string 
#and returns a dictionary of letter counts count_letters. If you were unable to complete 1b, 
#you can use the solution by selecting Show Answer. Use your function to call counter(sentence).

def counter(input_string):
    count_letters = {}
    for letter in input_string:
        if letter in count_letters:
                count_letters[letter] += 1
        else:
            count_letters[letter] = 1
    return count_letters


#---------------------------------------------------------------#

#1d
#Abraham Lincoln was a president during the American Civil War. His famous 1863 Gettysburg Address 
#has been stored as address, and the counter function defined in part 1c has been loaded. 
#Use these to return a dictionary consisting of the count of each letter in this address, 
#and save this as address_count. Print address_count.

address = """Four score and seven years ago our fathers brought forth on this continent, a new nation, conceived in Liberty, and dedicated to the proposition that all men are created equal. Now we are engaged in a great civil war, testing whether that nation, or any nation so conceived and so dedicated, can long endure. We are met on a great battle-field of that war. We have come to dedicate a portion of that field, as a final resting place for those who here gave their lives that that nation might live. It is altogether fitting and proper that we should do this. But, in a larger sense, we can not dedicate -- we can not consecrate -- we can not hallow -- this ground. The brave men, living and dead, who struggled here, have consecrated it, far above our poor power to add or detract. The world will little note, nor long remember what we say here, but it can never forget what they did here. It is for us the living, rather, to be dedicated here to the unfinished work which they who fought here have thus far so nobly advanced. It is rather for us to be here dedicated to the great task remaining before us -- that from these honored dead we take increased devotion to that cause for which they gave the last full measure of devotion -- that we here highly resolve that these dead shall not have died in vain -- that this nation, under God, shall have a new birth of freedom -- and that government of the people, by the people, for the people, shall not perish from the earth."""
address_count = counter(address)

#print(address_count)

#-------------------------------------------------

#1e
#What is the most common letter used in the Gettysburg Address?
#Store this letter as most_frequent_letter, and print your answer.

from collections import Counter

most_frequent_letter = Counter(address).most_common(1)

print(most_frequent_letter)

#or

maximum = 0
letter_maximum = ""
for letter in address_count:
    if address_count[letter] > maximum:
        maximum = address_count[letter]
        most_frequent_letter = letter

print(most_frequent_letter)
#----------------------------------------------------------------
#Exercise 2a
#Using the math library, calculate and print the value of  π/4 .
#What is the value of  π/4 ?
import math
print(math.pi/4)
#answer 0.7853981633974483

#---------------------------------------------------------------

#exercise 2b
#Using random.uniform(), create a function rand() that generates a single float between −1 and 1.
#Call rand() once. For us to be able to check your solution, we will use random.seed() to fix the seed value of the random number generator.
#We include some sample code to get you started:

import random

random.seed(1) # Fixes the seed of the random number generator.

def rand():
   # define `rand` here!
   return random.uniform(-1,1)
rand()
    
#What is the value you get from calling rand()?
#answer = -0.7312715117751976

#----------------------------------------------------------

#Exercise 2d
#Write a function in_circle(x, origin) that determines whether a point in a two dimensional plane falls within a unit circle surrounding a given origin.
#Your function should return a boolean True if the distance between x and origin is less than 1 and False otherwise.
#Use distance(x, y) as defined in Exercise 2c.

#Use your function to determine whether the point (1,1) lies within the unit circle centered at (0,0):
def distance(a, b):  
    dist = math.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2 )
    return dist
    
print(distance((0,0),(1,1)))
def in_circle(x, origin = [0,0]):
    return distance(x, origin) < 1
    
#Does the point (1,1) lie within the unit circle centered at (0,0)?

def in_circle(x, origin = [0,0]):
    if len(x) != 2:
        return "x is not two-dimensional!"
    elif distance(x, origin) < 1:
        return True
    else:
        return False

print(in_circle((1,1)))
False

#--------------------------------------------------------

R = 1000
x = []
inside = []
for i in range(R):
    point = [rand(), rand()]
    x.append(point)
    
for j in x:
    inside = [in_circle(j)] 
    
print(sum(inside)/R)



